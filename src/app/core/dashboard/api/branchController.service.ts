/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BranchCreationEntity } from '../model/branchCreationEntity';
import { BranchResponseEntity } from '../model/branchResponseEntity';
import { CounterEntity } from '../model/counterEntity';
import { EmployeeEntity } from '../model/employeeEntity';
import { VentiMetriQuadriData } from '../model/ventiMetriQuadriData';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({providedIn: 'root'})
export class BranchControllerService {

    protected basePath = 'http://localhost:8088/ventimetriservice';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling _delete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/branch/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param userCode
     * @param adminUserCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmEmployee(branchCode: string, userCode: string, adminUserCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public confirmEmployee(branchCode: string, userCode: string, adminUserCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public confirmEmployee(branchCode: string, userCode: string, adminUserCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public confirmEmployee(branchCode: string, userCode: string, adminUserCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling confirmEmployee.');
        }

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling confirmEmployee.');
        }

        if (adminUserCode === null || adminUserCode === undefined) {
            throw new Error('Required parameter adminUserCode was null or undefined when calling confirmEmployee.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (adminUserCode !== undefined && adminUserCode !== null) {
            queryParameters = queryParameters.set('adminUserCode', <any>adminUserCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/confirmemployee`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBranchDataByBranchCode(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchResponseEntity>;
    public getBranchDataByBranchCode(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchResponseEntity>>;
    public getBranchDataByBranchCode(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchResponseEntity>>;
    public getBranchDataByBranchCode(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling getBranchDataByBranchCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchResponseEntity>('get',`${this.basePath}/api/branchdatabybranchcode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBranchDataByBranchCodeAndUserCode(userCode: string, branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchResponseEntity>;
    public getBranchDataByBranchCodeAndUserCode(userCode: string, branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchResponseEntity>>;
    public getBranchDataByBranchCodeAndUserCode(userCode: string, branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchResponseEntity>>;
    public getBranchDataByBranchCodeAndUserCode(userCode: string, branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling getBranchDataByBranchCodeAndUserCode.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling getBranchDataByBranchCodeAndUserCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchResponseEntity>('get',`${this.basePath}/api/branchdatabybranchcodeanduser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchType
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBranchDataByBranchType(branchType: string, observe?: 'body', reportProgress?: boolean): Observable<Array<BranchResponseEntity>>;
    public getBranchDataByBranchType(branchType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BranchResponseEntity>>>;
    public getBranchDataByBranchType(branchType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BranchResponseEntity>>>;
    public getBranchDataByBranchType(branchType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchType === null || branchType === undefined) {
            throw new Error('Required parameter branchType was null or undefined when calling getBranchDataByBranchType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchType !== undefined && branchType !== null) {
            queryParameters = queryParameters.set('branchType', <any>branchType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<BranchResponseEntity>>('get',`${this.basePath}/api/branchdatabybranchtype`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeByBranchCode(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeEntity>>;
    public getEmployeeByBranchCode(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeEntity>>>;
    public getEmployeeByBranchCode(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeEntity>>>;
    public getEmployeeByBranchCode(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling getEmployeeByBranchCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeEntity>>('get',`${this.basePath}/api/retrieveemployeebybranchcode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeByUserCode(userCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeEntity>>;
    public getEmployeeByUserCode(userCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeEntity>>>;
    public getEmployeeByUserCode(userCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeEntity>>>;
    public getEmployeeByUserCode(userCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling getEmployeeByUserCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeEntity>>('get',`${this.basePath}/api/retrieveemployeebyusercode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userName
     * @param userCode
     * @param branchCodes
     * @param role
     * @param fcmToken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public linkUserToBranch(userName: string, userCode: string, branchCodes: Array<string>, role: string, fcmToken: string, observe?: 'body', reportProgress?: boolean): Observable<VentiMetriQuadriData>;
    public linkUserToBranch(userName: string, userCode: string, branchCodes: Array<string>, role: string, fcmToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VentiMetriQuadriData>>;
    public linkUserToBranch(userName: string, userCode: string, branchCodes: Array<string>, role: string, fcmToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VentiMetriQuadriData>>;
    public linkUserToBranch(userName: string, userCode: string, branchCodes: Array<string>, role: string, fcmToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling linkUserToBranch.');
        }

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling linkUserToBranch.');
        }

        if (branchCodes === null || branchCodes === undefined) {
            throw new Error('Required parameter branchCodes was null or undefined when calling linkUserToBranch.');
        }

        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling linkUserToBranch.');
        }

        if (fcmToken === null || fcmToken === undefined) {
            throw new Error('Required parameter fcmToken was null or undefined when calling linkUserToBranch.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (branchCodes) {
            branchCodes.forEach((element) => {
                queryParameters = queryParameters.append('branchCodes', <any>element);
            })
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (fcmToken !== undefined && fcmToken !== null) {
            queryParameters = queryParameters.set('fcmToken', <any>fcmToken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VentiMetriQuadriData>('put',`${this.basePath}/api/linkusertobranch`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUserFromBranch(userCode: string, branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUserFromBranch(userCode: string, branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUserFromBranch(userCode: string, branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUserFromBranch(userCode: string, branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling removeUserFromBranch.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling removeUserFromBranch.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/branch/removefromuserlist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveAll(observe?: 'body', reportProgress?: boolean): Observable<VentiMetriQuadriData>;
    public retrieveAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VentiMetriQuadriData>>;
    public retrieveAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VentiMetriQuadriData>>;
    public retrieveAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VentiMetriQuadriData>('get',`${this.basePath}/api/retrieveall`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveBranchByUserCodeAndBranchCode(userCode: string, branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchResponseEntity>;
    public retrieveBranchByUserCodeAndBranchCode(userCode: string, branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchResponseEntity>>;
    public retrieveBranchByUserCodeAndBranchCode(userCode: string, branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchResponseEntity>>;
    public retrieveBranchByUserCodeAndBranchCode(userCode: string, branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling retrieveBranchByUserCodeAndBranchCode.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling retrieveBranchByUserCodeAndBranchCode.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchResponseEntity>('get',`${this.basePath}/api/retrievebranchbyusercodeandbranchcode`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveBranchCounters(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<CounterEntity>;
    public retrieveBranchCounters(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CounterEntity>>;
    public retrieveBranchCounters(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CounterEntity>>;
    public retrieveBranchCounters(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling retrieveBranchCounters.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CounterEntity>('get',`${this.basePath}/api/retrievebranchcounters/${encodeURIComponent(String(branchCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param fcmToken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveData(userCode: string, fcmToken: string, observe?: 'body', reportProgress?: boolean): Observable<VentiMetriQuadriData>;
    public retrieveData(userCode: string, fcmToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VentiMetriQuadriData>>;
    public retrieveData(userCode: string, fcmToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VentiMetriQuadriData>>;
    public retrieveData(userCode: string, fcmToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling retrieveData.');
        }

        if (fcmToken === null || fcmToken === undefined) {
            throw new Error('Required parameter fcmToken was null or undefined when calling retrieveData.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (fcmToken !== undefined && fcmToken !== null) {
            queryParameters = queryParameters.set('fcmToken', <any>fcmToken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VentiMetriQuadriData>('get',`${this.basePath}/api/retrievedata`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save(body: BranchCreationEntity, observe?: 'body', reportProgress?: boolean): Observable<BranchResponseEntity>;
    public save(body: BranchCreationEntity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchResponseEntity>>;
    public save(body: BranchCreationEntity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchResponseEntity>>;
    public save(body: BranchCreationEntity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BranchResponseEntity>('post',`${this.basePath}/api/branch/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userCode
     * @param branchCode
     * @param fcmToken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setFcmToken(userCode: string, branchCode: string, fcmToken: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setFcmToken(userCode: string, branchCode: string, fcmToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setFcmToken(userCode: string, branchCode: string, fcmToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setFcmToken(userCode: string, branchCode: string, fcmToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling setFcmToken.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling setFcmToken.');
        }

        if (fcmToken === null || fcmToken === undefined) {
            throw new Error('Required parameter fcmToken was null or undefined when calling setFcmToken.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }
        if (fcmToken !== undefined && fcmToken !== null) {
            queryParameters = queryParameters.set('fcmToken', <any>fcmToken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/setfmctoken`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBranchData(body: BranchCreationEntity, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateBranchData(body: BranchCreationEntity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateBranchData(body: BranchCreationEntity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateBranchData(body: BranchCreationEntity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateBranchData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/updatebranchdata`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param userCode
     * @param role
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployeeRole(branchCode: string, userCode: string, role: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEmployeeRole(branchCode: string, userCode: string, role: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEmployeeRole(branchCode: string, userCode: string, role: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEmployeeRole(branchCode: string, userCode: string, role: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling updateEmployeeRole.');
        }

        if (userCode === null || userCode === undefined) {
            throw new Error('Required parameter userCode was null or undefined when calling updateEmployeeRole.');
        }

        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling updateEmployeeRole.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }
        if (userCode !== undefined && userCode !== null) {
            queryParameters = queryParameters.set('userCode', <any>userCode);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/update/employeerole`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
