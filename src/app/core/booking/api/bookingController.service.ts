/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BranchConfigurationDTO } from '../model/branchConfigurationDTO';
import { BranchGeneralConfigurationEditRequest } from '../model/branchGeneralConfigurationEditRequest';
import { CreateBookingRequest } from '../model/createBookingRequest';
import { Customer } from '../model/customer';
import { CustomerFormData } from '../model/customerFormData';
import { UpdateBranchTimeRanges } from '../model/updateBranchTimeRanges';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({providedIn: 'root'})
export class BookingControllerService {

    protected basePath = 'http://localhost:8088/ventimetribooking';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkWaApiStatus(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public checkWaApiStatus(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public checkWaApiStatus(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public checkWaApiStatus(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling checkWaApiStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchConfigurationDTO>('get',`${this.basePath}/booking/configuration/waapi/instance/checkstatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public configureNumberForWhatsAppMessaging(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public configureNumberForWhatsAppMessaging(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public configureNumberForWhatsAppMessaging(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public configureNumberForWhatsAppMessaging(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling configureNumberForWhatsAppMessaging.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchConfigurationDTO>('get',`${this.basePath}/booking/configuration/waapi/instance/configure`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param createBookingRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBooking(createBookingRequest: CreateBookingRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createBooking(createBookingRequest: CreateBookingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createBooking(createBookingRequest: CreateBookingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createBooking(createBookingRequest: CreateBookingRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (createBookingRequest === null || createBookingRequest === undefined) {
            throw new Error('Required parameter createBookingRequest was null or undefined when calling createBooking.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (createBookingRequest !== undefined && createBookingRequest !== null) {
            queryParameters = queryParameters.set('createBookingRequest', <any>createBookingRequest);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/booking/booking/create`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param timeRangeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTimeRange(timeRangeId: number, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public deleteTimeRange(timeRangeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public deleteTimeRange(timeRangeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public deleteTimeRange(timeRangeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (timeRangeId === null || timeRangeId === undefined) {
            throw new Error('Required parameter timeRangeId was null or undefined when calling deleteTimeRange.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (timeRangeId !== undefined && timeRangeId !== null) {
            queryParameters = queryParameters.set('timeRangeId', <any>timeRangeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchConfigurationDTO>('delete',`${this.basePath}/booking/deletetimerange`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reboot(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public reboot(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public reboot(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public reboot(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling reboot.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BranchConfigurationDTO>('get',`${this.basePath}/booking/configuration/waapi/instance/reboot`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param formCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveFormData(branchCode: string, formCode: string, observe?: 'body', reportProgress?: boolean): Observable<CustomerFormData>;
    public retrieveFormData(branchCode: string, formCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomerFormData>>;
    public retrieveFormData(branchCode: string, formCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerFormData>>;
    public retrieveFormData(branchCode: string, formCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling retrieveFormData.');
        }

        if (formCode === null || formCode === undefined) {
            throw new Error('Required parameter formCode was null or undefined when calling retrieveFormData.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchCode !== undefined && branchCode !== null) {
            queryParameters = queryParameters.set('branchCode', <any>branchCode);
        }
        if (formCode !== undefined && formCode !== null) {
            queryParameters = queryParameters.set('formCode', <any>formCode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CustomerFormData>('get',`${this.basePath}/booking/retrieveformdata`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param phone
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrievecustomerbyphoneoremail(phone: string, email: string, observe?: 'body', reportProgress?: boolean): Observable<Customer>;
    public retrievecustomerbyphoneoremail(phone: string, email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Customer>>;
    public retrievecustomerbyphoneoremail(phone: string, email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Customer>>;
    public retrievecustomerbyphoneoremail(phone: string, email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (phone === null || phone === undefined) {
            throw new Error('Required parameter phone was null or undefined when calling retrievecustomerbyphoneoremail.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling retrievecustomerbyphoneoremail.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (phone !== undefined && phone !== null) {
            queryParameters = queryParameters.set('phone', <any>phone);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Customer>('get',`${this.basePath}/booking/retrievecustomerbyphoneoremail`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchTimeRangeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public switchisclosedbranchtime(branchTimeRangeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public switchisclosedbranchtime(branchTimeRangeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public switchisclosedbranchtime(branchTimeRangeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public switchisclosedbranchtime(branchTimeRangeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchTimeRangeId === null || branchTimeRangeId === undefined) {
            throw new Error('Required parameter branchTimeRangeId was null or undefined when calling switchisclosedbranchtime.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branchTimeRangeId !== undefined && branchTimeRangeId !== null) {
            queryParameters = queryParameters.set('branchTimeRangeId', <any>branchTimeRangeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/booking/switchisclosedbranchtime`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateConfiguration(body: BranchGeneralConfigurationEditRequest, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public updateConfiguration(body: BranchGeneralConfigurationEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public updateConfiguration(body: BranchGeneralConfigurationEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public updateConfiguration(body: BranchGeneralConfigurationEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateConfiguration.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BranchConfigurationDTO>('post',`${this.basePath}/booking/updateconfiguration`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTimeRange(body: UpdateBranchTimeRanges, observe?: 'body', reportProgress?: boolean): Observable<BranchConfigurationDTO>;
    public updateTimeRange(body: UpdateBranchTimeRanges, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchConfigurationDTO>>;
    public updateTimeRange(body: UpdateBranchTimeRanges, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchConfigurationDTO>>;
    public updateTimeRange(body: UpdateBranchTimeRanges, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTimeRange.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<BranchConfigurationDTO>('post',`${this.basePath}/booking/configuration/timerange/update`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
