/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { EmployeeDTO } from '../model/employeeDTO';
import { EmployeePresenceReportDTO } from '../model/employeePresenceReportDTO';
import { EmployeeReportSummaryDTO } from '../model/employeeReportSummaryDTO';
import { RestaurantDTO } from '../model/restaurantDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({providedIn: 'root'})
export class RestaurantControllerService {

    protected basePath = 'http://localhost:60117/restaurantservice';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param body
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEmployee(body: EmployeeDTO, branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;
    public createEmployee(body: EmployeeDTO, branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;
    public createEmployee(body: EmployeeDTO, branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;
    public createEmployee(body: EmployeeDTO, branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createEmployee.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling createEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EmployeeDTO>('post',`${this.basePath}/api/restaurant/employee/create/${encodeURIComponent(String(branchCode))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createReports(body: Array<EmployeePresenceReportDTO>, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeePresenceReportDTO>>;
    public createReports(body: Array<EmployeePresenceReportDTO>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeePresenceReportDTO>>>;
    public createReports(body: Array<EmployeePresenceReportDTO>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeePresenceReportDTO>>>;
    public createReports(body: Array<EmployeePresenceReportDTO>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createReports.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<EmployeePresenceReportDTO>>('post',`${this.basePath}/api/restaurant/create/reports`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteReport(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteReport(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteReport(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteReport(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteReport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/restaurant/report/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findFiredEmployeeByBranchCode(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeDTO>>;
    public findFiredEmployeeByBranchCode(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeDTO>>>;
    public findFiredEmployeeByBranchCode(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeDTO>>>;
    public findFiredEmployeeByBranchCode(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling findFiredEmployeeByBranchCode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeDTO>>('get',`${this.basePath}/api/restaurant/getfiredemployeebybranchcode/${encodeURIComponent(String(branchCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param employeeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fireEmployee(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fireEmployee(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fireEmployee(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fireEmployee(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling fireEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/restaurant/fireemployee/${encodeURIComponent(String(employeeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEmployees(observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeDTO>>;
    public getAllEmployees(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeDTO>>>;
    public getAllEmployees(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeDTO>>>;
    public getAllEmployees(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeDTO>>('get',`${this.basePath}/api/restaurant/employee/getall`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeById(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;
    public getEmployeeById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;
    public getEmployeeById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;
    public getEmployeeById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEmployeeById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeeDTO>('get',`${this.basePath}/api/restaurant/getemployee/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeListByBranchCode(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeDTO>>;
    public getEmployeeListByBranchCode(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeDTO>>>;
    public getEmployeeListByBranchCode(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeDTO>>>;
    public getEmployeeListByBranchCode(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling getEmployeeListByBranchCode.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeDTO>>('get',`${this.basePath}/api/restaurant/getemployeebybranchcode/${encodeURIComponent(String(branchCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportById(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeePresenceReportDTO>;
    public getReportById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeePresenceReportDTO>>;
    public getReportById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeePresenceReportDTO>>;
    public getReportById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getReportById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<EmployeePresenceReportDTO>('get',`${this.basePath}/api/restaurant/getreport/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param zonedDateTime
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportsByBranchCodeAndDate(branchCode: string, zonedDateTime: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeePresenceReportDTO>>;
    public getReportsByBranchCodeAndDate(branchCode: string, zonedDateTime: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeePresenceReportDTO>>>;
    public getReportsByBranchCodeAndDate(branchCode: string, zonedDateTime: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeePresenceReportDTO>>>;
    public getReportsByBranchCodeAndDate(branchCode: string, zonedDateTime: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling getReportsByBranchCodeAndDate.');
        }

        if (zonedDateTime === null || zonedDateTime === undefined) {
            throw new Error('Required parameter zonedDateTime was null or undefined when calling getReportsByBranchCodeAndDate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (zonedDateTime !== undefined && zonedDateTime !== null) {
            queryParameters = queryParameters.set('zonedDateTime', <any>zonedDateTime.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeePresenceReportDTO>>('get',`${this.basePath}/api/restaurant/retrievereport/${encodeURIComponent(String(branchCode))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param employeeId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hideEmployee(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public hideEmployee(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public hideEmployee(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public hideEmployee(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling hideEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/restaurant/hideemployee/${encodeURIComponent(String(employeeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveConfiguration(branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<RestaurantDTO>;
    public retrieveConfiguration(branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestaurantDTO>>;
    public retrieveConfiguration(branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestaurantDTO>>;
    public retrieveConfiguration(branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling retrieveConfiguration.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RestaurantDTO>('post',`${this.basePath}/api/restaurant/restaurant/retrieveconfiguration/${encodeURIComponent(String(branchCode))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param branchCode
     * @param initialRangeDate
     * @param endRangeDate
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveReports(branchCode: string, initialRangeDate: Date, endRangeDate: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<EmployeeReportSummaryDTO>>;
    public retrieveReports(branchCode: string, initialRangeDate: Date, endRangeDate: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EmployeeReportSummaryDTO>>>;
    public retrieveReports(branchCode: string, initialRangeDate: Date, endRangeDate: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EmployeeReportSummaryDTO>>>;
    public retrieveReports(branchCode: string, initialRangeDate: Date, endRangeDate: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling retrieveReports.');
        }

        if (initialRangeDate === null || initialRangeDate === undefined) {
            throw new Error('Required parameter initialRangeDate was null or undefined when calling retrieveReports.');
        }

        if (endRangeDate === null || endRangeDate === undefined) {
            throw new Error('Required parameter endRangeDate was null or undefined when calling retrieveReports.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (initialRangeDate !== undefined && initialRangeDate !== null) {
            queryParameters = queryParameters.set('initialRangeDate', <any>initialRangeDate.toISOString());
        }
        if (endRangeDate !== undefined && endRangeDate !== null) {
            queryParameters = queryParameters.set('endRangeDate', <any>endRangeDate.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<EmployeeReportSummaryDTO>>('get',`${this.basePath}/api/restaurant/retrievereports/${encodeURIComponent(String(branchCode))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param branchCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployee(body: EmployeeDTO, branchCode: string, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;
    public updateEmployee(body: EmployeeDTO, branchCode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;
    public updateEmployee(body: EmployeeDTO, branchCode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;
    public updateEmployee(body: EmployeeDTO, branchCode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateEmployee.');
        }

        if (branchCode === null || branchCode === undefined) {
            throw new Error('Required parameter branchCode was null or undefined when calling updateEmployee.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EmployeeDTO>('put',`${this.basePath}/api/restaurant/employee/update/${encodeURIComponent(String(branchCode))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
